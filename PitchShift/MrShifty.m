classdef MrShifty < audioPlugin
    properties
        % EQ parameters
        LF_FREQ = 100;
        MF_FREQ = 1000;
        HF_FREQ = 8000;
        
        LF_GAIN = 0;
        MF_GAIN = 0;
        HF_GAIN = 0;

        LF_Q = 0.707;
        MF_Q = 0.707;
        HF_Q = 0.707;
        %Pitch shift parameters
        % Amount of pitch shift (in semi-tones)
        % Valid ranges are from -12 to 12
        PITCHSHIFT = 0;
        % Delay line overlap
        OVERLAP = 0.45;
        %Pitch Mix
        PITCHSHIFT_MIX = 50.0;
        %Drive
        DRIVE = 0.0;
        
    end

    properties (Constant)
PluginInterface = audioPluginInterface(...
            'PluginName','Mr. Shifty',...
            'VendorName', 'Patch In Audio',...
            'VendorVersion', '1.0.0',...
            'UniqueId','DATg',...
                audioPluginGridLayout(...
                'RowHeight', [85 100 85 85 85 50 50],...
                'ColumnWidth',[25 85 100 85 25 85 100 85 25 85 100 85 25]),...
                audioPluginParameter("PITCHSHIFT",...
                DisplayName="Pitch", ...
                Label="semitones", ...
                DisplayNameLocation="above", ...
                Mapping={"int",-12,12}, ...
                Style="rotaryknob", Layout=[5 8], ...
                Filmstrip = 'dial.png', ...
                FilmstripFrameSize = [70 70]), ...
                audioPluginParameter("OVERLAP", ...
                DisplayName="CPU Load", ...
                DisplayNameLocation="above", ...
                Mapping={"lin",.01,.5}, ...
                Style="rotaryknob", Layout=[5 12], ...
                Filmstrip = 'dial.png', ...
                FilmstripFrameSize = [70 70]),...  %end of param
                 audioPluginParameter('LF_FREQ',...
                'DisplayName', 'Lows',...
                'Style', 'rotaryknob',...
                'Layout', [2, 3],...
                'DisplayNameLocation','above',...
                'Label', 'Hz',...
                'Mapping', {'log', 20, 400}, ...
                'Filmstrip', 'dial.png',...
                'FilmstripFrameSize', [70 70]), ... % end of parameter
            audioPluginParameter('LF_GAIN',...
                'DisplayName', '-/+',...
                'Style', 'rotaryknob',...
                'Layout', [3, 4],...
                'DisplayNameLocation','above',...
                'Label', 'dB',...
                'Mapping', {'lin', -15, 15}, ...
                'Filmstrip', 'dial.png',...
                'FilmstripFrameSize', [70 70] ...
                ), ... % end of parameter
                audioPluginParameter('LF_Q',...
                'DisplayName', 'Q',...
                'Style', 'rotaryknob',...
                'Layout', [3, 2],...
                'DisplayNameLocation','above',...
                'Label', '',...
                'Mapping', {'lin', 0.1, 2.00}, ...
                'Filmstrip', 'dial.png',...
                'FilmstripFrameSize', [70 70] ...
                ), ... % end of parameter
            audioPluginParameter('MF_FREQ',...
                'DisplayName', 'Mids',...
                'Style', 'rotaryknob',...
                'Layout', [2, 7],...
                'DisplayNameLocation','above',...
                'Label', 'Hz', ...
                'Mapping', {'log', 200, 8000}, ...
                'Filmstrip', 'dial.png',...
                'FilmstripFrameSize', [70 70] ...
                ), ... % end of parameter
            audioPluginParameter('MF_GAIN',...
                'DisplayName', '-/+',...
                'Style', 'rotaryknob',...
                'Layout', [3, 8],...
                'DisplayNameLocation','above',...
                'Label', 'dB',...
                'Mapping', {'lin', -15, 15}, ...
                'Filmstrip', 'dial.png',...
                'FilmstripFrameSize', [70 70] ...
                ), ... % end of parameter
                audioPluginParameter('MF_Q',...
                'DisplayName', 'Q',...
                'Style', 'rotaryknob',...
                'Layout', [3, 6],...
                'DisplayNameLocation','above',...
                'Label', '',...
                'Mapping', {'lin', 0.1, 2.00}, ...
                'Filmstrip', 'dial.png',...
                'FilmstripFrameSize', [70 70] ...
                ), ... % end of parameter
            audioPluginParameter('HF_FREQ',...
                'DisplayName', 'Highs',...
                'Style', 'rotaryknob',...
                'Layout', [2, 11],...
                'DisplayNameLocation','above',...
                'Label', 'Hz',...
                'Mapping', {'log', 2000, 16000}, ...
                'Filmstrip', 'dial.png',...
                'FilmstripFrameSize', [70 70] ...
                ), ... % end of parameter
            audioPluginParameter('HF_GAIN',...
                'DisplayName', '-/+',...
                'Style', 'rotaryknob',...
                'Layout', [3, 12],...
                'DisplayNameLocation','above',...
                'Label', 'dB',...
                'Mapping', {'lin', -15, 15}, ...
                'Filmstrip', 'dial.png',...
                'FilmstripFrameSize', [70 70] ...
                ), ...
                audioPluginParameter('HF_Q',...
                'DisplayName', 'Q',...
                'Style', 'rotaryknob',...
                'Layout', [3, 10],...
                'DisplayNameLocation','above',...
                'Label', 'dB',...
                'Mapping', {'lin', 0.1, 2.00}, ...
                'Filmstrip', 'dial.png',...
                'FilmstripFrameSize', [70 70] ...
                ), ...
                audioPluginParameter('DRIVE',...
                'DisplayName', 'Error',...
                'Style', 'rotaryknob',...
                'Layout', [5,3 ; 6,5],...
                'DisplayNameLocation', 'above',...
                'Label', '%',...
                'Mapping', {'lin', 0, 100.0}, ...
                'Filmstrip', 'BigKnob.png',...
                'FilmstripFrameSize', [89 89]),...
                audioPluginParameter('PITCHSHIFT_MIX',...
                'DisplayName', 'Mix',...
                'Style', 'rotaryknob',...
                'Layout', [5,9;6,11],...
                'DisplayNameLocation', 'above',...
                'Label', '%',...
                'Mapping', {'lin', 1.0, 100.0}, ...
                'Filmstrip', 'BigKnob.png',...
                'FilmstripFrameSize', [89 89]),...
                'BackgroundImage','PatchBackground.jpg')
        % end of interface
    end

    properties (Access = private)
        % Sample rate
        FS = 44100;

        % Pitch Shifter
        PitchShifter;

        % Diode clipping parameters
        Vt = 0.0253;
        eta = 1.68;
        Is = 0.105;

        % Filter structures with persistent variables
        lowFreqFilter = struct('w', [0 0 ; 0 0], 'a0', 1, 'a1', 0, 'a2', 0, 'b0', 1, 'b1', 0, 'b2', 0, 'x1', 0, 'x2', 0, 'y1', 0, 'y2', 0);
        midFreqFilter = struct('w', [0 0 ; 0 0], 'a0', 1, 'a1', 0, 'a2', 0, 'b0', 1, 'b1', 0, 'b2', 0, 'x1', 0, 'x2', 0, 'y1', 0, 'y2', 0);
        highFreqFilter = struct('w', [0 0 ; 0 0], 'a0', 1, 'a1', 0, 'a2', 0, 'b0', 1, 'b1', 0, 'b2', 0, 'x1', 0, 'x2', 0, 'y1', 0, 'y2', 0);
    end

    methods
        function plugin = MrShifty()
            % Initialize Pitch Shifter
            plugin.PitchShifter = audiopluginexample.PitchShifter();
        end

        function out = process(plugin, in)
            % DSP section
            N = size(in, 1);
            out = coder.nullcopy(zeros(size(in)));

            % Mix factor for pitch shifting
            mixFactor = plugin.PITCHSHIFT_MIX / 100.0;

            % Pitch shifting and mix
            shiftedSignal = plugin.PitchShifter(in);
            pitchMixed = (1 - mixFactor) * in + mixFactor * shiftedSignal;

            % Diode clipping 
            clipped = zeros(size(pitchMixed)); % Preallocate the clipped signal

            for n = 1:length(pitchMixed)
                clipped(n, :) = plugin.Is * (exp(((plugin.DRIVE / 100 + 0.1) * pitchMixed(n, :)) / (plugin.eta * plugin.Vt)) - 1);
            end


            % EQ processing for each band (low, mid, high)
            filteredLow = zeros(size(clipped));
            filteredMid = zeros(size(clipped));
            filteredHigh = zeros(size(clipped));
            [filteredLow, plugin.lowFreqFilter] = plugin.filterProcess(clipped, plugin.lowFreqFilter);
            [filteredMid, plugin.midFreqFilter] = plugin.filterProcess(clipped, plugin.midFreqFilter);
            [filteredHigh, plugin.highFreqFilter] = plugin.filterProcess(clipped, plugin.highFreqFilter);

            % Sum all filtered outputs (low, mid, high)
            out = filteredLow + filteredMid + filteredHigh;
        end


        function [output, updatedFilter] = filterProcess(plugin, in, filter)
            % Process filter using biquad structure
            out = zeros(size(in));
            for n = 1:length(in)
                out(n, :) = (filter.b0/filter.a0) * in(n, :) + ...
                    (filter.b1/filter.a0) * filter.x1 + ...
                    (filter.b2/filter.a0) * filter.x2 - ...
                    ((-1 * filter.a1)/filter.a0) * filter.y1 - ...
                    ((-1 * filter.a2)/filter.a0) * filter.y2;

                % Update filter states
                filter.x2 = filter.x1;
                filter.x1 = in(n, :);
                filter.y2 = filter.y1;
                filter.y1 = out(n, :);
            end
            updatedFilter = filter; % Return the updated filter struct
            output = out;
        end


        function reset(plugin)
            % Called when sample rate changes or plugin is reloaded
            plugin.FS = getSampleRate(plugin);
        end

        function set.PITCHSHIFT(plugin, val)
            plugin.PITCHSHIFT = val;
            updatePitchShifter(plugin);
        end

        function set.OVERLAP(plugin, val)
            plugin.OVERLAP = val;
            updatePitchShifter(plugin);
        end

        function updatePitchShifter(plugin)
            plugin.PitchShifter.PitchShift = plugin.PITCHSHIFT;
            plugin.PitchShifter.Overlap = plugin.OVERLAP;
        end

        % Low Frequency EQ updates
        function set.LF_FREQ(plugin, val)
            plugin.LF_FREQ = val;
            update_LF(plugin);
        end

        function set.LF_GAIN(plugin, val)
            plugin.LF_GAIN = val;
            update_LF(plugin);
        end

        function update_LF(plugin)
            plugin.updateFilter(plugin.lowFreqFilter, plugin.LF_FREQ, plugin.LF_GAIN, plugin.LF_Q);
        end

        % Mid Frequency EQ updates
        function set.MF_FREQ(plugin, val)
            plugin.MF_FREQ = val;
            update_MF(plugin);
        end

        function set.MF_GAIN(plugin, val)
            plugin.MF_GAIN = val;
            update_MF(plugin);
        end

        function update_MF(plugin)
            plugin.updateFilter(plugin.midFreqFilter, plugin.MF_FREQ, plugin.MF_GAIN, plugin.MF_Q);
        end

        % High Frequency EQ updates
        function set.HF_FREQ(plugin, val)
            plugin.HF_FREQ = val;
            update_HF(plugin);
        end

        function set.HF_GAIN(plugin, val)
            plugin.HF_GAIN = val;
            update_HF(plugin);
        end

        function update_HF(plugin)
            plugin.updateFilter(plugin.highFreqFilter, plugin.HF_FREQ, plugin.HF_GAIN, plugin.HF_Q);
        end

        % Filter update method
        function updateFilter(plugin, filter, freq, gain, Q)
            % Calculate biquad coefficients
            A = db2mag(gain);
            omega = 2 * pi * freq / plugin.FS;
            alpha = sin(omega) / (2 * Q);
            cos_w = cos(omega);
            
            % Ensure stability
            %alpha = max(min(alpha, 1.0), 0.0001);
            
            % Peaking EQ coefficients
            filter.b0 = 1 + alpha * A;
            filter.b1 = -2 * cos_w;
            filter.b2 = 1 - alpha * A;
            filter.a0 = 1 + alpha / A;
            filter.a1 = -2 * cos_w;
            filter.a2 = 1 - alpha / A;
        end
    end
end